'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _magisterThing = require('./magisterThing');

var _magisterThing2 = _interopRequireDefault(_magisterThing);

var _addressInfo = require('./addressInfo');

var _addressInfo2 = _interopRequireDefault(_addressInfo);

var _profileSettings = require('./profileSettings');

var _profileSettings2 = _interopRequireDefault(_profileSettings);

var _util = require('./util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @extends {MagisterThing}
 */
class ProfileInfo extends _magisterThing2.default {
	/**
  * @private
  * @param {Magister} magister
  * @param {Object} raw
  */
	constructor(magister, raw) {
		super(magister);

		/**
   * @readonly
   * @type {String}
   */
		this.id = (0, _util.toString)(raw.Id);
		/**
   * @readonly
   * @type {String}
   */
		this.officialFirstNames = raw.OfficieleVoornamen;
		/**
   * @readonly
   * @type {String}
   */
		this.initials = raw.Voorletters;
		/**
   * @readonly
   * @type {String}
   */
		this.namePrefix = raw.Tussenvoegsel;
		/**
   * @readonly
   * @type {String}
   */
		this.officialSurname = raw.OfficieleAchternaam;
		/**
   * @readonly
   * @type {String}
   */
		this.birthSurname = raw.GeboorteAchternaam;
		/**
   * @readonly
   * @type {String}
   */
		this.birthNamePrefix = raw.GeboortenaamTussenvoegsel;
		/**
   * @readonly
   * @type {Boolean}
   */
		this.useBirthname = raw.GebruikGeboortenaam;
		/**
   * @readonly
   * @type {String}
   */
		this.firstName = raw.Roepnaam;
		/**
   * @readonly
   * @type {String}
   */
		this.lastName = raw.Achternaam;
		/**
   * @readonly
   * @type {Date}
   */
		this.birthDate = (0, _util.parseDate)(raw.Geboortedatum);

		/**
   * @readonly
   * @type {Boolean}
   */
		this.isChild = raw.ZichtbaarVoorOuder != null;
		/**
   * `undefined` when `this.isChild` is `false`.
   * @readonly
   * @type {Boolean|undefined}
   */
		this.isVisibleForParent = raw.ZichtbaarVoorOuder;
	}

	/**
  * @param {Boolean} [useBirthname=this.useBirthname]
  * @return String
  */
	getFullName(useBirthname = this.useBirthname) {
		return (0, _lodash2.default)(useBirthname ? [this.officialFirstNames, this.birthNamePrefix, this.birthSurname] : [this.firstName, this.namePrefix, this.lastName]).compact().join(' ');
	}

	/**
  * Opens a stream to the profile picture of the current user with the given
  * options.
  *
  * @param {Number} [width=640] The width of the picture.
  * @param {Number} [height=640] The height of the picture.
  * @param {Boolean} [crop=false] Whether or not to crop the image.
  * @return {Promise<Stream>}
  */
	getProfilePicture(width = 640, height = 640, crop = false) {
		const url = `${this._magister._personUrl}/foto?width=${width}&height=${height}&crop=${crop}`;
		return this._magister.http.get(url).then(res => res.body);
	}

	/**
  * @return {Promise<Error|AddressInfo>}
  */
	address() {
		const url = `${this._magister._personUrl}/adresprofiel`;

		return this._magister._privileges.needs('profiel', 'read').then(() => this._magister.http.get(url)).then(res => res.json()).then(raw => new _addressInfo2.default(this._magister, raw));
	}

	/**
  * @return {Promise<Error|ProfileSettings>}
  */
	settings() {
		const url = `${this._magister._personUrl}/profiel`;

		return this._magister._privileges.needs('profiel', 'read').then(() => this._magister.http.get(url)).then(res => res.json()).then(raw => new _profileSettings2.default(this._magister, raw));
	}
}

exports.default = ProfileInfo;