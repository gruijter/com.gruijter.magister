"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _magisterThing = _interopRequireDefault(require("./magisterThing"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

class ProfileSettings extends _magisterThing.default {
  /**
   * @private
   * @param {Magister} magister
   * @param {Object} raw
   */
  constructor(magister, raw) {
    super(magister);
    /**
     * @type {Boolean}
     */

    this.redirectMagisterMessages = raw.EloBerichtenDoorsturen;
    /**
     * @type {String}
     */

    this.emailAddress = raw.EmailAdres;
    /**
     * @type {String}
     */

    this.mobileNumber = raw.Mobiel;
  }
  /**
   * Update the server to reflect the changes made on the properties of this
   * ProfileSettings instance.
   * @return {Promise<Error|undefined>}
   */


  saveChanges() {
    var _this = this;

    return _asyncToGenerator(function* () {
      yield _this._magister._privileges.needs('profiel', 'update');
      const url = `${_this._magister._personUrl}/profiel`;
      yield _this._magister.http.put(url, _this._toMagister());
    })();
  }
  /**
   * Change the user password,
   * seperate function because requires verification.
   *
   * @param {String} changed
   * @param {String} [original] - Not required, defaults to password set on auth
   * @return {Promise}
   */


  changePassword(changed, original) {
    var _this2 = this;

    return _asyncToGenerator(function* () {
      original = original || _this2._magister._options.password;
      const schoolUrl = _this2._magister.school.url;
      yield _this2._magister._privileges.needs('wachtwoordwijzigen', 'update');
      const profile = yield _this2._magister.http.post(`${schoolUrl}/api/sessies/huidige/valideer`, {
        'wachtwoord': original
      }).then(res => res.json());

      if (profile.isVerified) {
        const selfUrl = profile.links.account.href;
        const status = yield _this2._magister.http.put(`${schoolUrl}/${selfUrl}/wachtwoord`, {
          'wachtwoord': changed,
          'wachtwoordControle': original
        }).then(res => res.status);

        if (status !== 204) {
          throw new Error(`Changing password failed with status code ${status}!`);
        }
      } else {
        throw new Error('Original password incorrect');
      }
    })();
  }
  /**
   * @private
   * @return {Object}
   */


  _toMagister() {
    return {
      EloBerichtenDoorsturen: this.redirectMagisterMessages,
      EmailAdres: this.emailAddress,
      Mobiel: this.mobileNumber
    };
  }

}

var _default = ProfileSettings;
exports.default = _default;