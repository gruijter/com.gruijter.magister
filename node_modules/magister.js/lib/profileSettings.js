'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _magisterThing = require('./magisterThing');

var _magisterThing2 = _interopRequireDefault(_magisterThing);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

/**
 * @extends MagisterThing
 * @private
 */
class ProfileSettings extends _magisterThing2.default {
	/**
  * @param {Magister} magister
  * @param {Object} raw
  */
	constructor(magister, raw) {
		super(magister);

		/**
   * @type Boolean
   * @readonly
   */
		this.redirectMagisterMessages = raw.EloBerichtenDoorsturen;
		/**
   * @type String
   * @readonly
   */
		this.emailAddress = raw.EmailAdres;
		/**
   * @type String
   * @readonly
   */
		this.mobileNumber = raw.Mobiel;
	}

	/**
  * Update the server to reflect the changes made on the properties of this
  * ProfileSettings instance.
  * @return {Promise<Error|undefined>}
  */
	saveChanges() {
		const url = `${this._magister._personUrl}/profiel`;

		return this._magister._privileges.needs('profiel', 'update').then(() => this._magister.http.put(url, this._toMagister())).then(() => undefined);
	}

	/**
  * Change the user password, 
  * seperate function because requires verification.
  * 
  * @param {String} changed
  * @param {String} [original] - Not required, defaults to password set on auth
  * @return {Promise}
  */
	changePassword(changed, original) {
		var _this = this;

		return _asyncToGenerator(function* () {
			original = original || _this._magister._options.password;
			const schoolUrl = _this._magister.school.url;

			yield _this._magister._privileges.needs('wachtwoordwijzigen', 'update');
			const profile = yield _this._magister.http.post(`${schoolUrl}/api/sessies/huidige/valideer`, {
				'wachtwoord': original
			}).then(function (res) {
				return res.json();
			});

			if (profile.isVerified) {
				const selfUrl = profile.links.account.href;
				const status = yield _this._magister.http.put(`${schoolUrl}/${selfUrl}/wachtwoord`, {
					'wachtwoord': changed,
					'wachtwoordControle': original
				}).then(function (res) {
					return res.status;
				});

				if (status !== 204) {
					throw new Error(`Changing password failed with status code ${status}!`);
				}
			} else {
				throw new Error('Original password incorrect');
			}
		})();
	}

	/**
  * @private
  * @return {Object}
  */
	_toMagister() {
		return {
			EloBerichtenDoorsturen: this.redirectMagisterMessages,
			EmailAdres: this.emailAddress,
			Mobiel: this.mobileNumber
		};
	}
}

exports.default = ProfileSettings;